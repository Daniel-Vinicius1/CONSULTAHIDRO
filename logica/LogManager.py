# scripts/logica/LogManager.py - SISTEMA DE LOG MELHORADO COM EMOJIS PNG CORRIGIDO
import os
from datetime import datetime
from pathlib import Path
from PIL import Image
import customtkinter as ctk
from tkinter import messagebox
from typing import Dict, Optional, Callable, List

class LogManager:
    """Gerenciador de logs melhorado com emojis PNG visuais e organiza√ß√£o"""
    
    def __init__(self):
        self.mensagens = []
        self.widget_log = None
        self.emojis_cache = {}
        self.processo_atual = ""
        self.callback_scroll = None
        
        # Carregar emojis dos addons
        self.carregar_emojis()
        
        # Tipos de log com cores
        self.cores_tipos = {
            'inicio': '#00ff00',      # Verde brilhante
            'processo': '#3498db',    # Azul
            'sucesso': '#2ecc71',     # Verde
            'aviso': '#f39c12',       # Laranja
            'erro': '#e74c3c',        # Vermelho
            'info': '#9b59b6',        # Roxo
            'banco': '#1abc9c',       # Turquesa
            'zip': '#f1c40f',         # Amarelo
            'concluido': '#27ae60'    # Verde escuro
        }
    
    def carregar_emojis(self):
        """Carrega todos os emojis dos addons - VERS√ÉO MELHORADA COM DEBUG"""
        try:
            # Caminho para os emojis
            emoji_path = Path("C:/Users/Samsung/Downloads/Esta√ß√µes_Hidroweb/Scripts/Addons")
            
            print(f"üîç Procurando emojis em: {emoji_path}")
            print(f"üìÅ Pasta existe: {emoji_path.exists()}")
            
            # Mapeamento dos emojis
            emojis_map = {
                'start': 'start.png',
                'processando': 'processando.png', 
                'zip': 'zip.png',
                'database': 'DataBase.png',  # Note o D mai√∫sculo
                'info': 'info.png',
                'error': 'error.png',
                'correto': 'correto.png'
            }
            
            # Listar todos os arquivos na pasta para debug
            if emoji_path.exists():
                arquivos_encontrados = list(emoji_path.glob("*.png"))
                print(f"üìã Arquivos PNG encontrados na pasta: {[f.name for f in arquivos_encontrados]}")
            
            for nome, arquivo in emojis_map.items():
                caminho_emoji = emoji_path / arquivo
                print(f"üìÅ Verificando: {caminho_emoji}")
                
                if caminho_emoji.exists():
                    try:
                        image = Image.open(caminho_emoji)
                        self.emojis_cache[nome] = ctk.CTkImage(image, size=(16, 16))
                        print(f"‚úÖ Emoji carregado: {nome} -> {arquivo}")
                    except Exception as e:
                        print(f"‚ùå Erro ao carregar emoji {arquivo}: {e}")
                        self.emojis_cache[nome] = None
                else:
                    print(f"‚ö†Ô∏è Emoji n√£o encontrado: {caminho_emoji}")
                    self.emojis_cache[nome] = None
            
            # Mostrar resumo
            emojis_carregados = sum(1 for emoji in self.emojis_cache.values() if emoji is not None)
            print(f"üìä Resumo: {emojis_carregados}/{len(emojis_map)} emojis PNG carregados com sucesso")
            print(f"üß™ Emojis dispon√≠veis: {list(self.emojis_cache.keys())}")
                    
        except Exception as e:
            print(f"‚ùå Erro geral ao carregar emojis: {e}")
    
    def set_widget(self, widget):
        """Define o widget de log"""
        self.widget_log = widget
        if self.widget_log:
            self.widget_log.configure(state="disabled")
    
    def set_callback_scroll(self, callback):
        """Define callback para scroll autom√°tico"""
        self.callback_scroll = callback
    
    def iniciar_processo(self, nome_processo: str):
        """Inicia um novo processo com separa√ß√£o visual"""
        self.processo_atual = nome_processo
        
        # Adicionar linha em branco se j√° houver mensagens
        if self.mensagens:
            self._adicionar_linha_vazia()
        
        # Adicionar cabe√ßalho do processo
        timestamp = datetime.now().strftime("%H:%M:%S")
        separador = "=" * 50
        
        texto_cabecalho = f"\n[{timestamp}] {'üöÄ' if nome_processo.startswith('DOWNLOAD') else '‚ö°'} {nome_processo.upper()}\n{separador}"
        
        self._adicionar_mensagem_direta(texto_cabecalho, '#ffffff', emoji_tipo='start')
    
    def log_download_inicio(self, total_estacoes: int):
        """Log do in√≠cio do download"""
        self.iniciar_processo(f"DOWNLOAD DE {total_estacoes} ESTA√á√ïES")
        self.adicionar('processo', 'Download', f'Iniciando download de {total_estacoes} esta√ß√µes', emoji_tipo='processando')
    
    def log_download_estacao(self, codigo: str, atual: int, total: int, sucesso: bool = True):
        """Log do download de uma esta√ß√£o espec√≠fica"""
        if sucesso:
            self.adicionar('sucesso', 'Download', f'[{atual}/{total}] Esta√ß√£o {codigo} baixada', emoji_tipo='correto')
        else:
            self.adicionar('erro', 'Download', f'[{atual}/{total}] Falha ao baixar esta√ß√£o {codigo}', emoji_tipo='error')
    
    def log_download_final(self, baixadas: List[str], falharam: List[str], inexistentes: List[str]):
        """Log final do download com resumo"""
        total = len(baixadas) + len(falharam) + len(inexistentes)
        
        self.adicionar('info', 'Download', f'RESUMO: {len(baixadas)}/{total} esta√ß√µes baixadas', emoji_tipo='info')
        
        if falharam:
            self.adicionar('aviso', 'Download', f'Falharam: {", ".join(falharam)}', emoji_tipo='error')
        
        if inexistentes:
            self.adicionar('aviso', 'Download', f'Inexistentes: {", ".join(inexistentes)}', emoji_tipo='error')
        
        if len(baixadas) == total:
            self.adicionar('concluido', 'Download', 'Todas as esta√ß√µes foram baixadas com sucesso!', emoji_tipo='correto')
    
    def log_extracao_inicio(self):
        """Log do in√≠cio da extra√ß√£o"""
        self.iniciar_processo("EXTRA√á√ÉO E CONSOLIDA√á√ÉO")
        self.adicionar('processo', 'Extra√ß√£o', 'Iniciando processamento dos arquivos ZIP', emoji_tipo='zip')
    
    def log_extracao_progresso(self, arquivo: str, atual: int, total: int):
        """Log do progresso da extra√ß√£o"""
        self.adicionar('processo', 'Extra√ß√£o', f'[{atual}/{total}] Processando {arquivo}', emoji_tipo='zip')
    
    def log_extracao_final(self, arquivo_final: str, total_registros: int):
        """Log final da extra√ß√£o"""
        nome_arquivo = os.path.basename(arquivo_final)
        self.adicionar('sucesso', 'Extra√ß√£o', f'Arquivo consolidado: {nome_arquivo}', emoji_tipo='correto')
        self.adicionar('info', 'Extra√ß√£o', f'Total de registros: {total_registros:,}', emoji_tipo='info')
        self.adicionar('concluido', 'Extra√ß√£o', 'Consolida√ß√£o conclu√≠da com sucesso!', emoji_tipo='correto')
    
    def log_banco_inicio(self, host: str, database: str, tabela: str = None):
        """Log do in√≠cio da conex√£o com banco"""
        self.iniciar_processo("CONEX√ÉO COM BANCO DE DADOS")
        self.adicionar('processo', 'Banco', f'Conectando: {host}/{database}', emoji_tipo='database')
        if tabela:
            self.adicionar('info', 'Banco', f'Tabela: {tabela}', emoji_tipo='info')
    
    def log_banco_conexao_sucesso(self, total_registros_existentes: int):
        """Log de conex√£o bem-sucedida"""
        self.adicionar('sucesso', 'Banco', 'Conex√£o estabelecida com sucesso', emoji_tipo='correto')
        self.adicionar('info', 'Banco', f'Registros na tabela: {total_registros_existentes:,}', emoji_tipo='info')
    
    def log_banco_insercao_inicio(self, total_registros: int):
        """Log do in√≠cio da inser√ß√£o"""
        self.adicionar('processo', 'Banco', f'Iniciando inser√ß√£o de {total_registros:,} registros', emoji_tipo='database')
    
    def log_banco_insercao_progresso(self, lote: int, total_lotes: int, registros_lote: int):
        """Log do progresso da inser√ß√£o"""
        self.adicionar('processo', 'Banco', f'Lote {lote}/{total_lotes}: {registros_lote} registros', emoji_tipo='database')
    
    def log_banco_duplicatas(self, duplicatas_encontradas: int, novos_inseridos: int):
        """Log de duplicatas encontradas"""
        self.adicionar('info', 'Banco', f'Duplicatas ignoradas: {duplicatas_encontradas:,}', emoji_tipo='info')
        self.adicionar('info', 'Banco', f'Novos registros inseridos: {novos_inseridos:,}', emoji_tipo='info')
    
    def log_banco_final(self, total_final: int, tempo_execucao: str):
        """Log final da inser√ß√£o no banco"""
        self.adicionar('info', 'Banco', f'Total de registros na tabela: {total_final:,}', emoji_tipo='info')
        self.adicionar('info', 'Banco', f'Tempo de execu√ß√£o: {tempo_execucao}', emoji_tipo='info')
        self.adicionar('concluido', 'Banco', 'Inser√ß√£o no banco conclu√≠da com sucesso!', emoji_tipo='correto')
    
    def log_erro_geral(self, etapa: str, erro: str):
        """Log de erro geral"""
        self.adicionar('erro', etapa, f'ERRO: {erro}', emoji_tipo='error')
    
    def adicionar(self, tipo: str, etapa: str, mensagem: str, emoji_tipo: str = None):
        """
        Adiciona uma mensagem ao log - VERS√ÉO CORRIGIDA PARA EMOJIS PNG
        
        Args:
            tipo: 'inicio', 'processo', 'sucesso', 'aviso', 'erro', 'info', 'banco', 'zip', 'concluido'
            etapa: Nome da etapa (ex: 'Download', 'Extra√ß√£o', 'Banco')
            mensagem: Texto da mensagem
            emoji_tipo: Tipo do emoji a usar ('start', 'processando', 'zip', 'database', 'info', 'error', 'correto')
        """
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Usar emojis PNG se dispon√≠veis, sen√£o usar emojis melhorados
        emoji_visual = self._obter_emoji_visual(emoji_tipo or tipo)
        
        # Formatar mensagem
        texto_formatado = f"[{timestamp}] {emoji_visual} {etapa}: {mensagem}"
        
        # Cor baseada no tipo
        cor = self.cores_tipos.get(tipo, '#ffffff')
        
        # Adicionar √† lista
        self.mensagens.append({
            'timestamp': timestamp,
            'tipo': tipo,
            'etapa': etapa,
            'mensagem': mensagem,
            'texto_formatado': texto_formatado,
            'cor': cor,
            'emoji_tipo': emoji_tipo
        })
        
        # Manter apenas as √∫ltimas 100 mensagens
        if len(self.mensagens) > 100:
            self.mensagens = self.mensagens[-100:]
        
        # Atualizar widget
        self._atualizar_widget()
    
    def _obter_emoji_visual(self, emoji_tipo: str) -> str:
        """Obt√©m o emoji visual - PRIORIZA PNGs MAS USA FALLBACK MELHORADO"""
        
        # Emojis melhorados e mais visuais como fallback
        emojis_melhorados = {
            'start': 'üöÄ',        # Foguete para in√≠cio
            'processando': '‚öôÔ∏è',   # Engrenagem para processamento  
            'zip': 'üì¶',          # Caixa para zip
            'database': 'üíæ',     # Disquete para banco de dados
            'info': 'üí°',         # L√¢mpada para informa√ß√£o
            'error': 'üî¥',        # C√≠rculo vermelho para erro
            'correto': '‚úÖ',      # Check verde para sucesso
            'inicio': 'üü¢',       # C√≠rculo verde
            'processo': 'üîµ',     # C√≠rculo azul
            'sucesso': '‚úÖ',      # Check verde
            'aviso': '‚ö†Ô∏è',        # Tri√¢ngulo de aviso
            'erro': '‚ùå',         # X vermelho
            'banco': 'üóÑÔ∏è',       # Arquivo de banco
            'concluido': 'üéâ'     # Festa para conclus√£o
        }
        
        # VERIFICAR SE TEMOS O PNG DISPON√çVEL
        if emoji_tipo in self.emojis_cache and self.emojis_cache[emoji_tipo] is not None:
            # Se temos PNG, usar um emoji especial + descri√ß√£o para debug
            emoji_base = emojis_melhorados.get(emoji_tipo, 'üìù')
            return f"{emoji_base}"  # Por enquanto usar o emoji melhorado
            # TODO: No futuro, implementar inser√ß√£o real de PNG inline
        
        # Se n√£o tem PNG, usar emoji melhorado
        return emojis_melhorados.get(emoji_tipo, 'üìù')
    
    def _adicionar_linha_vazia(self):
        """Adiciona uma linha vazia para separa√ß√£o"""
        if self.widget_log:
            self.widget_log.configure(state="normal")
            self.widget_log.insert("end", "\n")
            self.widget_log.configure(state="disabled")
    
    def _adicionar_mensagem_direta(self, texto: str, cor: str, emoji_tipo: str = None):
        """Adiciona uma mensagem diretamente ao widget"""
        if self.widget_log:
            self.widget_log.configure(state="normal")
            self.widget_log.insert("end", texto + "\n")
            self.widget_log.configure(state="disabled")
            self._scroll_para_fim()
    
    def _atualizar_widget(self):
        """Atualiza o widget de log com as mensagens"""
        if not self.widget_log:
            return
        
        # Habilitar temporariamente para edi√ß√£o
        self.widget_log.configure(state="normal")
        
        # Adicionar apenas a √∫ltima mensagem (mais eficiente)
        if self.mensagens:
            ultima_msg = self.mensagens[-1]
            texto_formatado = ultima_msg['texto_formatado']
            
            # Log de debug para verificar emoji
            emoji_tipo = ultima_msg.get('emoji_tipo')
            if emoji_tipo:
                png_disponivel = emoji_tipo in self.emojis_cache and self.emojis_cache[emoji_tipo] is not None
                print(f"üé® Emoji {emoji_tipo}: PNG dispon√≠vel = {png_disponivel}")
            
            self.widget_log.insert("end", texto_formatado + "\n")
        
        # Scroll para o final
        self._scroll_para_fim()
        
        # Desabilitar novamente
        self.widget_log.configure(state="disabled")
    
    def _scroll_para_fim(self):
        """Faz scroll para o final do log"""
        if self.widget_log:
            self.widget_log.see("end")
            if self.callback_scroll:
                self.callback_scroll()
    
    def limpar(self):
        """Limpa todas as mensagens do log"""
        self.mensagens = []
        self.processo_atual = ""
        if self.widget_log:
            self.widget_log.configure(state="normal")
            self.widget_log.delete("1.0", "end")
            self.widget_log.configure(state="disabled")
    
    def obter_resumo_download(self, baixadas: List[str], falharam: List[str], inexistentes: List[str]) -> str:
        """Gera resumo do download para exibi√ß√£o"""
        total = len(baixadas) + len(falharam) + len(inexistentes)
        
        resumo = f"üìä RELAT√ìRIO DE DOWNLOAD\n\n"
        resumo += f"‚úÖ Total baixadas: {len(baixadas)}/{total}\n"
        
        if len(baixadas) == total:
            resumo += f"\nüéâ Todas as esta√ß√µes foram baixadas com sucesso!"
        else:
            if falharam:
                resumo += f"\n‚ùå Esta√ß√µes com falha ({len(falharam)}):\n"
                for estacao in falharam:
                    resumo += f"   ‚Ä¢ {estacao} - Erro t√©cnico/timeout\n"
            
            if inexistentes:
                resumo += f"\nüö´ Esta√ß√µes n√£o encontradas ({len(inexistentes)}):\n"
                for estacao in inexistentes:
                    resumo += f"   ‚Ä¢ {estacao} - C√≥digo inexistente\n"
        
        return resumo


class DialogManager:
    """Gerenciador de di√°logos para feedback do usu√°rio"""
    
    @staticmethod
    def mostrar_relatorio_download_consulta(baixadas: List[str], falharam: List[str], inexistentes: List[str]) -> bool:
        """
        Mostra relat√≥rio de download para consulta simples
        Retorna True se deve tentar novamente as falhas, False caso contr√°rio
        """
        total = len(baixadas) + len(falharam) + len(inexistentes)
        
        if len(baixadas) == total:
            # Tudo OK
            msg = f"üéâ DOWNLOAD CONCLU√çDO COM SUCESSO!\n\n"
            msg += f"üìä Estat√≠sticas:\n"
            msg += f"   ‚úÖ Baixadas: {len(baixadas)}\n"
            msg += f"   üìÅ Local: Pasta 'Consultadas'\n\n"
            msg += f"Todas as esta√ß√µes foram baixadas com sucesso!"
            
            messagebox.showinfo("‚úÖ Download Conclu√≠do", msg)
            return False
        else:
            # Houve problemas
            msg = f"‚ö†Ô∏è DOWNLOAD PARCIALMENTE CONCLU√çDO\n\n"
            msg += f"üìä Estat√≠sticas:\n"
            msg += f"   ‚úÖ Baixadas: {len(baixadas)}/{total}\n"
            msg += f"   ‚ùå Com problemas: {len(falharam) + len(inexistentes)}\n\n"
            
            if falharam:
                msg += f"üî¥ Esta√ß√µes com falha t√©cnica:\n"
                for estacao in falharam[:5]:  # Mostrar apenas as primeiras 5
                    msg += f"   ‚Ä¢ {estacao}\n"
                if len(falharam) > 5:
                    msg += f"   ‚Ä¢ ... e mais {len(falharam) - 5} esta√ß√µes\n"
                msg += f"\n"
            
            if inexistentes:
                msg += f"üö´ Esta√ß√µes n√£o encontradas:\n"
                for estacao in inexistentes[:5]:  # Mostrar apenas as primeiras 5
                    msg += f"   ‚Ä¢ {estacao}\n"
                if len(inexistentes) > 5:
                    msg += f"   ‚Ä¢ ... e mais {len(inexistentes) - 5} esta√ß√µes\n"
                msg += f"\n"
            
            msg += f"Deseja tentar o download dos itens com falha?"
            
            return messagebox.askyesno("‚ö†Ô∏è Download Parcial", msg)
    
    @staticmethod
    def mostrar_confirmacao_banco_com_falhas(falharam: List[str], inexistentes: List[str]) -> str:
        """
        Mostra confirma√ß√£o para continuar para o banco mesmo com falhas
        Retorna 'tentar', 'prosseguir' ou 'cancelar'
        """
        estacoes_problema = falharam + inexistentes
        
        msg = f"‚ö†Ô∏è ALGUMAS ESTA√á√ïES N√ÉO FORAM BAIXADAS\n\n"
        msg += f"‚ùå As seguintes esta√ß√µes n√£o foram baixadas:\n"
        
        for estacao in estacoes_problema[:8]:  # Mostrar apenas as primeiras 8
            msg += f"   ‚Ä¢ {estacao}\n"
        
        if len(estacoes_problema) > 8:
            msg += f"   ‚Ä¢ ... e mais {len(estacoes_problema) - 8} esta√ß√µes\n"
        
        msg += f"\nü§î O que deseja fazer?"
        
        # Usar um di√°logo customizado com 3 op√ß√µes
        return DialogManager._mostrar_dialogo_tres_opcoes(
            "‚ö†Ô∏è Esta√ß√µes N√£o Baixadas",
            msg,
            "Tentar Novamente",
            "Prosseguir para Banco",
            "Cancelar"
        )
    
    @staticmethod
    def _mostrar_dialogo_tres_opcoes(titulo: str, mensagem: str, opcao1: str, opcao2: str, opcao3: str) -> Optional[str]:
        """
        Cria um di√°logo customizado com tr√™s op√ß√µes
        Retorna: 'tentar', 'prosseguir', 'cancelar' ou None se cancelado
        """
        # Criar janela customizada
        dialogo = ctk.CTkToplevel()
        dialogo.title(titulo)
        dialogo.geometry("500x350")
        dialogo.resizable(False, False)
        dialogo.configure(fg_color="#0f172a")
        dialogo.transient()
        dialogo.grab_set()
        
        # Centralizar
        dialogo.update_idletasks()
        x = (dialogo.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialogo.winfo_screenheight() // 2) - (350 // 2)
        dialogo.geometry(f"+{x}+{y}")
        
        resultado = None
        
        # T√≠tulo
        titulo_label = ctk.CTkLabel(
            dialogo,
            text=titulo,
            font=("Lato", 18, "bold"),
            text_color="#f8fafc"
        )
        titulo_label.pack(pady=(20, 15))
        
        # Mensagem
        msg_label = ctk.CTkLabel(
            dialogo,
            text=mensagem,
            font=("Lato", 12, "normal"),
            text_color="#94a3b8",
            wraplength=450,
            justify="left"
        )
        msg_label.pack(pady=(0, 30), padx=20)
        
        # Frame para bot√µes
        frame_botoes = ctk.CTkFrame(dialogo, fg_color="transparent")
        frame_botoes.pack(fill="x", padx=40, pady=(0, 20))
        
        def definir_resultado(valor):
            nonlocal resultado
            resultado = valor
            dialogo.destroy()
        
        # Bot√£o 1 - Tentar Novamente
        btn1 = ctk.CTkButton(
            frame_botoes,
            text=opcao1,
            command=lambda: definir_resultado("tentar"),
            width=120,
            height=35,
            fg_color="#3498db",
            hover_color="#2980b9",
            font=("Lato", 12, "bold"),
            corner_radius=15
        )
        btn1.pack(pady=5, fill="x")
        
        # Bot√£o 2 - Prosseguir
        btn2 = ctk.CTkButton(
            frame_botoes,
            text=opcao2,
            command=lambda: definir_resultado("prosseguir"),
            width=120,
            height=35,
            fg_color="#2ecc71",
            hover_color="#27ae60",
            font=("Lato", 12, "bold"),
            corner_radius=15
        )
        btn2.pack(pady=5, fill="x")
        
        # Bot√£o 3 - Cancelar
        btn3 = ctk.CTkButton(
            frame_botoes,
            text=opcao3,
            command=lambda: definir_resultado("cancelar"),
            width=120,
            height=35,
            fg_color="#e74c3c",
            hover_color="#c0392b",
            font=("Lato", 12, "bold"),
            corner_radius=15
        )
        btn3.pack(pady=5, fill="x")
        
        # Aguardar resultado
        dialogo.wait_window()
        
        return resultado


# Inst√¢ncia global do log manager
log_manager = LogManager()

# Fun√ß√£o de conveni√™ncia para usar nos outros m√≥dulos
def get_log_manager():
    """Retorna a inst√¢ncia do log manager"""
    return log_manager